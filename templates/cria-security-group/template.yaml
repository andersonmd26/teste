apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: cria-sg-crossplane
  title: Criar Security Group na AWS
  description: Provisiona um Security Group na AWS.
spec:
  owner: DevOps
  type: configuration

  parameters:
    - title: Configurações do Security Group
      required: [sgName, region, description, repoInfra]
      properties:
        sgName:
          type: string
          title: Nome do SG
        region:
          type: string
          title: Região AWS
          enum:
            - us-east-1
            - sa-east-1
          default: us-east-1
        description:
          type: string
          title: Descrição
          default: Criado via Backstage
        repoInfra:
          type: string
          title: Nome do repositório para o SG
        ingressRules:
          type: array
          title: Regras de Ingresso
          items:
            type: object
            required: [fromPort,toPort,protocol,cidrBlocks]
            properties:
              fromPort:
                type: number
                title: Porta Inicial
                default: 22
              toPort:
                type: number
                title: Porta Final
                default: 22
              protocol:
                type: string
                title: Protocolo
                enum: ["tcp","udp","icmp"]
                default: ssh
              cidrBlocks:
                type: array
                title: CIDR Blocks
                items:
                  type: string
                default: ["0.0.0.0/0"]
        egressRules:
          type: array
          title: Regras de Egressão
          items:
            type: object
            required: [fromPort,toPort,protocol,cidrBlocks]
            properties:
              fromPort:
                type: number
                title: Porta Inicial
                default: 0
              toPort:
                type: number
                title: Porta Final
                default: 0
              protocol:
                type: string
                title: Protocolo
                enum: ["tcp","udp","icmp","-1"]
                default: -1
              cidrBlocks:
                type: array
                title: CIDR Blocks
                items:
                  type: string
                default: ["0.0.0.0/0"]

    - title: Azure DevOps
      required: [organization, project]
      properties:
        organization:
          type: string
          title: Organização
          default: andersonmd
          ui:field: hidden
        project:
          type: string
          title: Projeto
          default: backstage
          ui:field: hidden

  steps:
    - id: generate
      name: Gerar workspace.yaml
      action: fetch:template
      input:
        url: ./skeleton-sg
        targetPath: sg
        values:
          sgName:       ${{ parameters.sgName }}
          region:       ${{ parameters.region }}
          description:  ${{ parameters.description }}
          ingressRules: ${{ parameters.ingressRules }}
          egressRules:  ${{ parameters.egressRules }}
          organization: ${{ parameters.organization }}
          project:      ${{ parameters.project }}
          repoInfra:    ${{ parameters.repoInfra }}
          # targetPath: output

    - id: rename_sg
      name: Renomear para workspace.yaml
      action: fs:rename
      input:
        files:
          - from: sg/workspace.yaml.njk
            to: sg/workspace.yaml

    - id: publish_sg
      name: Publica no Azure DevOps
      action: publish:azure
      input:
        repoUrl:           "dev.azure.com?organization=${{parameters.organization}}&project=${{parameters.project}}&repo=${{parameters.repoInfra}}"
        defaultBranch:     desenvolvimento
        sourcePath:        sg
        description:       "Workspace SG ${{ parameters.sgName }}"
        gitCommitMessage:  "Security Group ${{ parameters.sgName }} criado via Backstage"

# aqui comça parte para envio do catalog

    - id: clone-catalog
      name: Clonar repo applications_argocd
      action: azure:repo:clone
      input:
        remoteUrl: "https://${{ parameters.organization }}@dev.azure.com/${{ parameters.organization }}/${{ parameters.project }}/_git/catalogos"
        branch: desenvolvimento
        targetPath: catalogos

    - id: generate_catalog
      name: Gerar workspace.yaml
      action: fetch:template
      input:
        url: ./skeleton-catalog
        targetPath: catalogos
        values:
          sgName:       ${{ parameters.sgName }}
          organization: ${{ parameters.organization }}
          project:      ${{ parameters.project }}
          repoInfra:    ${{ parameters.repoInfra }}
          # targetPath: output

    - id: rename_catalog
      name: Renomear para catalog-info.yaml
      action: fs:rename
      input:
        files:
          - from: catalogos/catalog-info.yaml.njk
            to: catalogos/catalog-info.yaml
            
    - id: push-catalogo
      name: Push Catalogo
      action: azure:repo:push
      input:
        branch: desenvolvimento
        gitCommitMessage: Cria catalogo ${{ parameters.sgName }}
        force: true
        sourcePath: catalogos

    - id: register
      name: Registrar no Backstage (cria componente)
      action: catalog:register
      input:
        repoContentsUrl: "https://dev.azure.com/${{ parameters.organization }}/${{ parameters.project }}/_git/catalogos"
        catalogInfoPath: /catalog-info.yaml

      
# aqui começa parte de criar o application do argocd
    - id: clone-argocd
      name: Clonar repo applications_argocd
      action: azure:repo:clone
      input:
        remoteUrl: "https://${{ parameters.organization }}@dev.azure.com/${{ parameters.organization }}/${{ parameters.project }}/_git/applications_argocd"
        branch: desenvolvimento
        targetPath: argocd

    - id: generate-app
      name: Gerar Application do ArgoCD
      action: fetch:template
      input:
        url: ./skeleton-argocd
        targetPath: argocd
        values:
          appName: ${{ parameters.sgName }}
          repoUrl: "git@ssh.dev.azure.com:v3/${{ parameters.organization }}/${{ parameters.project }}/${{ parameters.repoInfra }}"

    - id: rename_argocd
      name: Renomear para application.yaml
      action: fs:rename
      input:
        files:
          - from: argocd/application.yaml.njk
            to: argocd/application.yaml

    - id: push-app
      name: Push do Application ArgoCD
      action: azure:repo:push
      input:
        branch: desenvolvimento
        gitCommitMessage: Criado Application do ArgoCD via Backstage
        force: true
        sourcePath: argocd

  output:
    links:
      - title: Ver repositório do SG
        url: "https://dev.azure.com/${{ parameters.organization }}/${{ parameters.project }}/_git/${{ parameters.repoInfra }}"
